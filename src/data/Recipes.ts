// src/data/Recipes.ts

/**
 * Defines the input requirements for a recipe.
 * The key is the chemical ID, and the value is the amount required.
 */
export type RecipeInput = Record<string, number>; // e.g., { 'Raw Chemical A': 1 }

/**
 * Defines the output generated by a recipe.
 * The key is the chemical ID, and the value is the amount produced.
 */
export type RecipeOutput = Record<string, number>; // e.g., { 'Product B': 1 }

/**
 * Defines the structure for a single processing recipe.
 */
export interface RecipeData {
    /** A unique identifier for the recipe (e.g., 'Mix A to B'). */
    id: string;
    /** The type of machine required to perform this recipe (e.g., 'Mixer'). */
    machineType: string;
    /** The input chemicals and amounts required. */
    inputs: RecipeInput;
    /** The output chemicals and amounts produced. */
    outputs: RecipeOutput;
    /** The time required to complete one cycle of this recipe, in seconds. */
    processingTimeSeconds: number;
}

/**
 * A list containing all available recipes in the game.
 * We use a list here because the order might matter later, or we might filter it.
 * A map could also be used if lookup by ID is the primary need.
 */
export const RECIPE_DATA: RecipeData[] = [
    // --- Mixer Recipes ---
    {
        id: 'Mix A to B',                // Unique recipe name
        machineType: 'Mixer',            // Requires a Mixer machine
        inputs: { 'Raw Chemical A': 1 }, // Needs 1 unit of Raw Chemical A
        outputs: { 'Product B': 1 },     // Produces 1 unit of Product B
        processingTimeSeconds: 5,        // Takes 5 seconds
    },

    // --- Future Recipes can be added here ---
    // {
    //     id: 'Heat X to Y',
    //     machineType: 'Heater',
    //     inputs: { 'Acid X': 2 },
    //     outputs: { 'Compound Y': 1 },
    //     processingTimeSeconds: 8,
    // },
];

/**
 * Helper function to find recipes compatible with a specific machine type.
 * @param machineType The type of machine (e.g., 'Mixer').
 * @returns An array of RecipeData objects that can be performed by that machine type.
 */
export function getRecipesForMachine(machineType: string): RecipeData[] {
    return RECIPE_DATA.filter(recipe => recipe.machineType === machineType);
}